#!/bin/bash

# -- Setup --

# Fail if any command fails
set -eo pipefail

# Print a blank line before starting, to look cool :P
echo
# Also print one before we exit
trap echo EXIT

# -- Input and Output --

# Define colors so we can print colorful text
color_red="\033[0;31m"
color_green="\033[0;32m"
color_yellow="\033[0;33m"
color_cyan="\033[0;36m"
color_dimmed="\033[1;30m"
color_normal="\033[0m"

# Define output helper functions
# Print functions with different colors
function print_success {
	echo -e "${color_green} ~ | $1 ${color_normal}"
}
function print_warning {
	echo -e "${color_yellow} ! | $1 ${color_normal}"
}
function print_error {
	echo -e "${color_red} E | $1 ${color_normal}"
}
function print_info {
	echo -e "${color_cyan} i | $1 ${color_normal}"
}

# Get the targets to build
# Users should pass them as arguments to the script as follows:
#   ./scripts/build bap-base bap-client
# The possible targets are 'bap-base', 'bap-protocol-helper', 'bap-client', and 'bap-storefront'
build_targets=("$@")
# Get the version to tag them with
version="$(cat version)"

# -- Input Validation --

print_info "Parsing build targets passed to script"

# If no build targets are mentioned, build all of them!
if [[ "${#build_targets[@]}" == 0 ]]
then
	build_targets=("bap-base" "bap-protocol-helper" "bap-client" "bap-storefront")
fi
# Check that the build targets mentioned are valid
for target in "${build_targets[@]}"
do
	if [[ "${target}" != "bap-base" ]] \
	&& [[ "${target}" != "bap-protocol-helper" ]] \
	&& [[ "${target}" != "bap-client" ]] \
	&& [[ "${target}" != "bap-storefront" ]]
	then
		print_error "Invalid target passed to build: expected 'bap-base', 'bap-protocol-helper', 'bap-client', or 'bap-storefront', found ${target}"
		exit 1
	fi
done

print_info "Building the following targets: ${color_yellow}${build_targets[*]}${color_normal}"

# -- Preparation --

print_info "Copying sources and dockerfiles into a build folder"

# Make a `build/` folder
rm -rf build && mkdir build && cd build

# Copy the sources and the dockerfiles into the folder
cp -r ../sources/ ./
cp -r ../scripts/dockerfiles/* ./

print_success "Preparation successful"

# -- Build Process --

# Loop through the targets and build them one by one
for target in "${build_targets[@]}"
do
	image="${target/bap-/}"

	print_info "Building ${color_yellow}${target}@${version}${color_cyan} using ${color_yellow}'scripts/dockerfiles/${image}.dockerfile'${color_normal}"
	echo -e "${color_dimmed}"
	
	docker build \
		--tag "ghcr.io/beckn/${target}:latest" \
		--tag "ghcr.io/beckn/${target}:${version}" \
		--tag "${target}" \
		--file "${image}.dockerfile" .

	echo -e "${color_normal}"
	print_success "Successfully built ${color_yellow}${target}@${version}${color_normal}"
done
